#!/bin/sh
### BEGIN INIT INFO
# Provides:       mscs
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# chkconfig:      345 50 50
# Description:    Minecraft Server Control Script
### END INIT INFO

# This is a wrapper to msctl that imitates traditional mscs behaviour:
# uses the same default user, config file and location.

# Get executable name
PROG=$(basename $0)
if (echo $0 | grep -q -e '^/') ;then full_prog=$0; else full_prog=`pwd`/$0 ;fi;full_prog=${full_prog//\/.\//\/}
progName=`basename ${full_prog}` ; scriptPath=`dirname ${full_prog}` 

# Setup the default user name.
USER_NAME="minecraft"

# Setup the default installation location.
LOCATION="/opt/mscs"

# Setup the default location of the mscs.defaults file.
MSCS_DEFAULTS="$LOCATION/mscs.defaults"

# Setup the arguments to the msctl script.
MSCS_ARGS="-p $PROG -l $LOCATION -c $MSCS_DEFAULTS $@"
MSCTL=$(which msctl)
if [  ! -e "${MSCTL}" ] ; then
    # not in path: try in the same directory as mscs
    MSCTL=${scriptPath}/msctl
fi

if [  !  -e "${MSCTL}" ] ; then
    echo "ERROR: msctl is not found in  $PATH and ${scriptPath}/   ${MSCTL}"
    exit 1;
fi
echo "MAIN Script" ${MSCTL}
# Run the msctl script.
if [ "$USER_NAME" = "$(whoami)" ]; then
  ${MSCTL} $MSCS_ARGS
else
  sudo -u $USER_NAME ${MSCTL} $MSCS_ARGS
fi
